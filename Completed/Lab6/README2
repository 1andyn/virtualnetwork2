Implementation of part 1 (switches):
	Created files called "switch.h" and "switch.c"

	"switch.h" contains a new struct called "SwitchState"
	Has a forwarding table unique to the switch and a 
	Has Queue for managing the sending/receiving of packets
	Has an dynamic array of links to all hosts

	"switch.c" has the main function for the switch.
	The main is very similar to that of the host. It loops infinitely and 
	constantly polls for packets. Once a packet is received, it is updated
	in the table and pushed into the queue. It also constant checks the head
	of the queue for a packet. If there's a packet it will look at the
	forwarding table and find the link, or send to all links.

	The switch is initialized "main.c". It's physical ids are created after
	that of the hosts. Each switch closes all manager connetions as they are
	not needed. They also initalize links by looking through all links in the
	LinkArray and checking the src/dst addresses. Then it closes all other
	links that are not connected to it.

Implementation of part 2 (longer data):
	Created a file called "databuff.h"

	"databuff.h" contains a struct called DataBuffer. The DataBuffer is 
	very similar to a packetbuffer, but has a larger payload. This is needed
	so that we can hold all the data when we upload, and hold all the data
	when we download. Instead of initializing the packetBuffer, the DataBuffer
	is inialized with all needed information.

	I added a "hostInitTransmit" function which gets the dstaddr and also
	says that we are "busy" or currently transmitting. Then I edited the
	"hostTransmitPacket" function so that it would take 200 bytes of data
	at a time from the DataBuffer and put it into a packet. It also keeps 
	track which packet is the start and which packet is the end. Then every
	10 ms it will transmit, untill all the data has been sent in the
	DataBuffer.

	When receiving data, we first check if it is the start packet. If it is,
	then we clear the receive buffer (instance of DataBuffer) and reset the
	clear flag. This is done so that if a new set of packets is sent, it will
	overwrite the hold set (not concatenate it to the end). Then it 
	concatentates the payload to the end of the receive buffer and updates 
	the length. Finally it checks to see if we're at the end. If we are 
	then we set the flag to true.

	** NOTE ** 
	The actual size of the data being transfered is 414 bytes. This is because
	we are actually sending the payload and a bunch of other things like
	the start, end, srcaddr, etc. We are also adding in spaces. If you want
	to fix this, you would just need to lower the max payload size so that
	the # of bytes is what you want. Also you would need to adjust the
	PACKET_SIZE so that it is the exact max size of each packet. The reason
	I created this PACKET_SIZE macro was because the host would send multiple
	packets into the pipe before I read. This means that there would be two
	packets in the buffer. If I read a 1000 bytes from the pipe, then it
	would read in two packets. This is not what we want because our
	packetBuffer can only hold information for one packet. 

Implementation of part3 (network topology):
	At the start of the progam, the user gets prompted for a file. We open
	the file and read line by line. First we initialize the # of switches,
	# of hosts, and # of links. Then we input each of the values into
	an array of integers called src and dst. This will hold the information
	that we need for the links. Then we send these in when we call
	"netSetNetworkTopology".  This function just loops through the # of links
	and then uses src and dst arrays to set the links up properly.

	Format for creating topologies (when linking switches, start from the #
	of hosts):

		#ofhosts #oflinks #ofswitches 
		linkSrc linkDst
		linkSrc linkDst
		.
		.
		.
	
	example (3 hosts, 8 links, and 2 switches, Y topology):
		3 8 2
		0 3
		1 3
		4 3
		4 2

	anything >= 3 is a switch and anything < 3 is a host.
		
		





